from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from datetime import datetime
from time import time
from bot.core.tapper import vote_card_for_all_tappers, vote_card_for_tapper_by_name, tapper_instances
from bot.config import settings

class TelegramBot:
    def __init__(self, token: str):
        self.bot = Bot(token=token)
        self.dp = Dispatcher()

    async def start(self):
        self.dp.message(Command("start"))(self.start_handler)
        self.dp.message(Command("vote"))(self.vote_handler)
        self.dp.message(Command("current_round"))(self.current_round)
        self.dp.message(Command("list_tappers"))(self.list_tappers_handler)
        self.dp.message(Command("vote_tapper"))(self.vote_tapper_handler)
        await self.bot.set_my_commands([
            types.BotCommand(command="vote", description="üó≥Ô∏è –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –≤—Å–µ–º —Å–µ—Å—Å–∏—è–º"),
            types.BotCommand(command="current_round", description="üìã –í—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ–∫—É—â–µ–º—É —Ä–∞—É–Ω–¥—É"),
            types.BotCommand(command="list_tappers", description="üìã –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π"),
            types.BotCommand(command="vote_tapper", description="üéØ –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏"),
        ])
        
        await self.dp.start_polling(self.bot)

    async def current_round(self, message: types.Message):
        if str(message.from_user.id) in str(settings.ADMIN_UID):
            tapper = list(tapper_instances.values())[-1]
            gameState = await tapper.get_gameState()
            if gameState is None:
                await message.reply("‚ùå –¢–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            round_end_at = max(gameState.get('roundEndsAt', 0) - time(), 0)
            start_time = datetime.fromtimestamp(gameState['roundEndsAt'] - 86400)
            end_time = datetime.fromtimestamp(gameState['roundEndsAt'])
            
            info = f"üéÆ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Ä–∞—É–Ω–¥–µ üéÆ\n\n"
            info += f"üïí –ù–∞—á–∞–ª–æ —Ä–∞—É–Ω–¥–∞: {start_time.strftime('%Y-%m-%d %H:%M:%S')}\n"
            info += f"üèÅ –ö–æ–Ω–µ—Ü —Ä–∞—É–Ω–¥–∞: {end_time.strftime('%Y-%m-%d %H:%M:%S')}\n"
            info += f"‚è≥ –†–∞—É–Ω–¥ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑: {int(round_end_at / 60)} –º–∏–Ω—É—Ç\n\n"
            info += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {gameState['description']}\n\n"
            info += "üÉè –ö–∞—Ä—Ç–æ—á–∫–∏:\n"
            
            for card in gameState['roundCards']:
                info += f"\n{card['number']}. {card['name']}"
            
            await message.reply(info)
        else:
            await message.reply("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")

    async def start_handler(self, message: types.Message):
        if str(message.from_user.id) in str(settings.ADMIN_UID):
            await message.reply("üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! –Ø –±–æ—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π /vote <–Ω–æ–º–µ—Ä_–∫–∞—Ä—Ç—ã> –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.")
        else:
            await message.reply("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")

    async def vote_handler(self, message: types.Message):
        if str(message.from_user.id) not in str(settings.ADMIN_UID):
            await message.reply("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return

        try:
            _, card_input = message.text.split(maxsplit=1)
            await message.reply(f"‚úÖ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –∫–∞—Ä—Ç—É(—ã) {card_input} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π.")
            await vote_card_for_all_tappers(card_input)
        except ValueError:
            await message.reply("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /vote <–Ω–æ–º–µ—Ä_–∫–∞—Ä—Ç—ã> –∏–ª–∏ /vote <–Ω–æ–º–µ—Ä_–∫–∞—Ä—Ç—ã1,–Ω–æ–º–µ—Ä_–∫–∞—Ä—Ç—ã2>")

    async def vote_tapper_handler(self, message: types.Message):
        if str(message.from_user.id) not in str(settings.ADMIN_UID):
            await message.reply("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return
        
        try:
            _, session_name, card_input = message.text.split(maxsplit=2)
            await message.reply(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_name} —Å –∫–∞—Ä—Ç–æ–π(–∞–º–∏) {card_input}.")
            await vote_card_for_tapper_by_name(session_name, card_input)
        except ValueError:
            await message.reply("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /vote_tapper <–∏–º—è_—Å–µ—Å—Å–∏–∏> <–Ω–æ–º–µ—Ä_–∫–∞—Ä—Ç—ã> –∏–ª–∏ /vote_tapper <–∏–º—è_—Å–µ—Å—Å–∏–∏> <–Ω–æ–º–µ—Ä_–∫–∞—Ä—Ç—ã1,–Ω–æ–º–µ—Ä_–∫–∞—Ä—Ç—ã2>")
            
    async def list_tappers_handler(self, message: types.Message):
        if str(message.from_user.id) not in str(settings.ADMIN_UID):
            await message.reply("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return
        
        tapper_list = "\n".join(tapper_instances.keys())
        cleaned_list = tapper_list.encode('utf-8', errors='ignore').decode('utf-8')
        await message.reply(f"üìã –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–ø–ø–µ—Ä–æ–≤:\n{cleaned_list}")

async def run_bot():
    if settings.BOT_TOKEN is None and settings.ADMIN_UID is None:
        return
    
    bot = TelegramBot(settings.BOT_TOKEN)
    await bot.start()